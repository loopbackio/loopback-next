language: node_js

os:
  - linux

node_js:
  - "10"
  - "12"
  - "14"
  - "15"

script:
  - npm run postinstall
  - npm run build
  - npm run test:ci

# Increase the memory to 2G for node
env: TASK=test NODE_OPTIONS="--max-old-space-size=2048"

cache:
  yarn: true

before_install:
  - npm i -g yarn
  - yarn --version
  - |
    NPMVER=`npm --version`
    if [ ${NPMVER/\.*/} = 7 ]
    then
      echo "Downgrading bundled npm version $NPMVER to v6"
      npm i -g npm@6
    else
      echo "Using bundled npm version $NPMVER"
    fi
  - npm --version

install: npm ci --ignore-scripts

after_success:
  - if [[ "${TRAVIS_OS_NAME}" == "linux" ]] && [[ $(echo $TRAVIS_NODE_VERSION | cut -d'.' -f1) == "10" ]]; then npm run coverage:ci; fi

branches:
  only:
    - master

jobs:
  include:
    - node_js: "12"
      os: osx

      # using the default script to build & run the tests
    - node_js: "12"
      os: linux
      env: TASK=code-lint
      # Running Code Linter -- Requires @loopback/build so it's bootstrapped
      # We actually need to bootstrap all packages, otherwise typescript-eslint
      # is not able to access type information for dependencies
      script:
        - lerna bootstrap
        - npm run build
        - npm run lint
        - npm run check-package-metadata

    - node_js: "12"
      os: linux
      env: TASK=commit-lint
      script: commitlint-travis

    - node_js: "12"
      os: linux
      env: TASK=verify-docs
      # The default npm for node v12.16.1 (npm v6.13.4) fails with cb() never called
      before_install: npm i -g npm
      script:
        - lerna bootstrap
        - npm run build
        - npm run --prefix docs version
        - ./bin/verify-doc-changes.sh

    - node_js: "12"
      os: linux
      env:
        - TASK=test-repository-mongodb
      services:
        - mongodb
      script:
        - lerna bootstrap --scope "@loopback/test-repository-mongodb" --include-dependencies
        - cd acceptance/repository-mongodb && npm test

    - node_js: "12"
      os: linux
      env:
        - TASK=test-repository-mysql
        - MYSQL_USER=test
        - MYSQL_PASSWORD=test
      services:
        - mysql
      before_install:
        - mysql -u root -e "CREATE USER 'test'@'localhost' IDENTIFIED BY 'test';"
        - mysql -e "use mysql; update user set authentication_string=PASSWORD('test') where User='test'; update user set plugin='mysql_native_password';FLUSH PRIVILEGES;"
        - mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'test'@'localhost' WITH GRANT OPTION;FLUSH PRIVILEGES;"
        - mysql -e "GRANT SUPER ON *.* TO 'test'@'localhost' IDENTIFIED BY 'test';FLUSH PRIVILEGES;"
      script:
        - lerna bootstrap --scope "@loopback/test-repository-mysql" --include-dependencies
        - cd acceptance/repository-mysql && npm test

    - node_js: "12"
      os: linux
      env:
        - TASK=test-repository-postgresql
        - POSTGRESQL_USER=postgres
      services:
        - postgresql
      script:
        - lerna bootstrap --scope "@loopback/test-repository-postgresql" --include-dependencies
        - psql -U postgres -a -f acceptance/repository-postgresql/test/schema.sql
        - cd acceptance/repository-postgresql && npm test

    - node_js: "12"
      os: linux
      env:
        - TASK=test-repository-cloudant
      script:
        # set up docker image and create admin for cloudant.
        - lerna bootstrap --scope "@loopback/test-repository-cloudant" --include-dependencies
        - cd acceptance/repository-cloudant && sh setup.sh
        - npm test

    - node_js: "12"
      os: linux
      env:
        - TASK=test-extension-logging-fluentd
      services:
        - docker
      script:
        - lerna bootstrap --scope "@loopback/test-extension-logging-fluentd" --include-dependencies
        - cd acceptance/extension-logging-fluentd && npm test

    - node_js: "12"
      os: linux
      env:
        - TASK=test-benchmark
      script:
        - lerna bootstrap --scope "@loopback/benchmark" --include-dependencies
        - cd benchmark && npm test
