openapi: '3.0.0'
info:
  version: 1.0.0
  title: Customer
  description: A simple customer api with irregularity in names
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url:
    description: null url for testing
  - url: https://localhost:3000
    description: Local laptop testing
tags:
  - name: Customer
    description: Customer resource
paths:
  /customers:
    parameters:
      - name: access-token
        in: query
        description: Access token (/* access_token */)
        required: false
        schema:
          type: string
    get:
      tags:
        - Customer
      description: Returns all customers (/* customers */)
      operationId: getCustomers
      parameters:
        - name: if
          in: query
          description: if condition
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: customer response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      tags:
        - Customer
      description: Creates a new customer
      operationId: addCustomer
      x-operation-name: createCustomer
      requestBody:
        description: Customer to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: customer response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  /customers/{customer-id}:
    get:
      tags:
        - Customer
      description: Returns a customer based on a single ID
      x-implementation: "return {id: customerId, 'first-name': 'John', 'last-name': 'Smith'};"
      operationId: find customer by id
      parameters:
        - name: customer-id
          in: path
          description: ID of customer to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: customer response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
components:
  schemas:
    Name:
      type: string
    profileId:
      type: string
    AddressList:
      items:
        $ref: '#/components/schemas/Address'
      type: array
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
      additionalProperties: true
    USAddress:
      $ref: '#/components/schemas/Address'
    Customer:
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        first-name:
          type: string
        last-name:
          $ref: '#/components/schemas/Name'
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/profileId'
        emails:
          type: array
          items:
            type: string
        addresses:
          $ref: '#/components/schemas/AddressList'
        us-office:
          $ref: '#/components/schemas/USAddress'
