import {getService} from '@loopback/service-proxy';
import {inject, Provider} from '@loopback/core';
import {<%- dataSourceClassName %>} from '../datasources';

<%_
imports.forEach(i => {
-%>
<%- i %>
<%_
});
-%>

/**
 * The service interface is generated from OpenAPI spec with operations tagged
 * by <%- tag || '<no-tag>' %>.
<%_ const _comment = escapeComment(description);
  if (_comment) {
-%>
 * <%- _comment %>
<%_ } -%>
 */
export interface <%- serviceClassName %> {
  <%_ for (const m of methods) { -%>
  /**
  <%_ for (const c of m.comments) {
    const _comment = escapeComment(c);
    if (_comment) {
  -%>
   * <%- _comment %>
  <%_ }
   } -%>
   */
  <%_ if (usePositionalParams !== false) { -%>
  <%- m.signatureForInterface %>;
  <%_ } else { -%>
  <%- m.signatureForNamedParams %>;
  <%_ } -%>

  <%_ } -%>
}

export class <%- serviceClassName %>Provider implements Provider<<%- serviceClassName %>> {
  constructor(
    // <%- dataSourceName %> must match the name property in the datasource json file
    @inject('datasources.<%- dataSourceName %>')
    protected dataSource: <%- dataSourceClassName %> = new <%- dataSourceClassName %>(),
  ) {}

  async value(): Promise<<%- serviceClassName %>> {
    const service = await getService<{apis: {'<%- tag || 'default' %>': Record<string, Function>}}>(
      this.dataSource,
    );
    const proxy = service.apis['<%- tag || 'default' %>'];
    return cast(proxy);
  }
}


/**
 * Type for method names of <%- serviceClassName %>
 */
type ServiceMethod = keyof <%- serviceClassName %>;

/**
 * Map method names to operation ids for <%- serviceClassName %>
 */
const METHOD_OPERATION_MAPPING: Record<ServiceMethod, string> = <%- methodMappingObject %>;

/**
 * Cast the proxy to <%- serviceClassName %>
 */
function cast(proxy: Record<string, Function>): <%- serviceClassName %> {
  const methods: Partial<Record<ServiceMethod, Function>> = {};
  let m: ServiceMethod;
  for (m in METHOD_OPERATION_MAPPING) {
    const op = METHOD_OPERATION_MAPPING[m];
    methods[m] = (...args: unknown[]) => proxy[op](...args);
  }
  return methods as <%- serviceClassName %>;
}
