import {
  Count,
  CountSchema,
  Filter,
  repository,
  Where,
} from '@loopback/repository';
import {
  del,
  get,
  getWhereSchemaFor,
  param,
  patch,
  post,
  requestBody,
} from '@loopback/rest';
import { <%= sourceModelClassName %>, <%= targetModelClassName %> } from '../models';
import { <%= sourceRepositoryClassName %> } from '../repositories';

export class <%= controllerClassName %> {
  constructor(
    @repository(<%= sourceRepositoryClassName %>) protected <%= paramSourceRepository %>: <%= sourceRepositoryClassName %>,
  ) { }

  @get('/<%= sourceModelName %>s/{id}/<%= targetModelName %>s', {
    responses: {
      '200': {
        description: "Array of <%= targetModelClassName %>'s belonging to <%= sourceModelClassName %>",
        content: {
          'application/json': {
            schema: { type: 'array', items: { 'x-ts-type': <%= targetModelClassName %> } },
          },
        },
      },
    },
  })
  async find(
    @param.path.number('id') id: number,
    @param.query.object('filter') filter?: Filter,
  ): Promise<<%= targetModelClassName %>[]> {
    return await this.<%= paramSourceRepository %>.<%= targetModelName %>s(id).find(filter);
  }

  @post('/<%= sourceModelName %>s/{id}/<%= targetModelName %>s', {
    responses: {
      '200': {
        description: '<%= sourceModelClassName %> model instance',
        content: { 'application/json': { schema: { 'x-ts-type': <%= targetModelClassName %> } } },
      },
    },
  })
  async create(
    @param.path.number('id') <%= relationPropertyName %>: typeof <%= sourceModelClassName %>.prototype.<%= foreignKey %>,
    @requestBody() <%= targetModelName %>: <%= targetModelClassName %>,
  ): Promise<<%= targetModelClassName %>> {
    return await this.<%= paramSourceRepository %>.<%= targetModelName %>s(<%= relationPropertyName %>).create(<%= targetModelName %>);
  }

  @patch('/<%= sourceModelName %>s/{id}/<%= targetModelName %>s', {
    responses: {
      '200': {
        description: '<%= sourceModelClassName %>.<%= targetModelClassName %> PATCH success count',
        content: { 'application/json': { schema: CountSchema } },
      },
    },
  })
  async patch(
    @param.path.number('id') id: number,
    @requestBody() <%= targetModelName %>: Partial<<%= targetModelClassName %>>,
    @param.query.object('where', getWhereSchemaFor(<%= targetModelClassName %>)) where?: Where,
  ): Promise<Count> {
    return await this.<%= paramSourceRepository %>.<%= targetModelName %>s(id).patch(<%= targetModelName %>, where);
  }

  @del('/<%= sourceModelName %>s/{id}/<%= targetModelName %>s', {
    responses: {
      '200': {
        description: '<%= sourceModelClassName %>.<%= targetModelClassName %> DELETE success count',
        content: { 'application/json': { schema: CountSchema } },
      },
    },
  })
  async delete(
    @param.path.number('id') id: number,
    @param.query.object('where', getWhereSchemaFor(<%= targetModelClassName %>)) where?: Where,
  ): Promise<Count> {
    return await this.<%= paramSourceRepository %>.<%= targetModelName %>s(id).delete(where);
  }
}
